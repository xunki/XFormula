//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Code/MyCode/XFormula/XFormula/Grammar\ExcelFormula.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace XFormula.Antlr4Gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class ExcelFormulaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, ABS=6, MAX=7, MIN=8, SUMSQ=9, 
		SUM=10, ROUND=11, IF=12, OR=13, AND=14, NOT=15, AVERAGE=16, POWER=17, 
		SQRT=18, RAND=19, MOD=20, INT=21, INTEGER=22, FLOAT=23, SCIENTIFIC_NUMBER=24, 
		BOOLEAN=25, STRING=26, CELL=27, OPERATOR=28, WHITE_SPACE=29;
	public const int
		RULE_expr = 0;
	public static readonly string[] ruleNames = {
		"expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'-('", "')'", "'('", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "ABS", "MAX", "MIN", "SUMSQ", "SUM", 
		"ROUND", "IF", "OR", "AND", "NOT", "AVERAGE", "POWER", "SQRT", "RAND", 
		"MOD", "INT", "INTEGER", "FLOAT", "SCIENTIFIC_NUMBER", "BOOLEAN", "STRING", 
		"CELL", "OPERATOR", "WHITE_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExcelFormula.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExcelFormulaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExcelFormulaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExcelFormulaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ExcelFormulaParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(ExcelFormulaParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MaxContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMax(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CellRangeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CELL() { return GetTokens(ExcelFormulaParser.CELL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CELL(int i) {
			return GetToken(ExcelFormulaParser.CELL, i);
		}
		public CellRangeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExcelFormulaParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ExcelFormulaParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbsContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(ExcelFormulaParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AbsContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegativeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegativeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoundContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(ExcelFormulaParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ExcelFormulaParser.INTEGER, 0); }
		public RoundContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ExcelFormulaParser.BOOLEAN, 0); }
		public BooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CellContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CELL() { return GetToken(ExcelFormulaParser.CELL, 0); }
		public CellContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumSqContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUMSQ() { return GetToken(ExcelFormulaParser.SUMSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SumSqContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumSq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ExcelFormulaParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ExcelFormulaParser.INTEGER, 0); }
		public ModContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RandContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAND() { return GetToken(ExcelFormulaParser.RAND, 0); }
		public RandContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqrtContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(ExcelFormulaParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SqrtContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVERAGE() { return GetToken(ExcelFormulaParser.AVERAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AverageContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(ExcelFormulaParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SumContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CalcContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(ExcelFormulaParser.OPERATOR, 0); }
		public CalcContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ExcelFormulaParser.INTEGER, 0); }
		public IntegerContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ExcelFormulaParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ExcelFormulaParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(ExcelFormulaParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MinContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ExcelFormulaParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScientificNumberContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCIENTIFIC_NUMBER() { return GetToken(ExcelFormulaParser.SCIENTIFIC_NUMBER, 0); }
		public ScientificNumberContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ExcelFormulaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ExcelFormulaParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PowerContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExcelFormulaVisitor<TResult> typedVisitor = visitor as IExcelFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 3;
				Match(FLOAT);
				}
				break;
			case 2:
				{
				_localctx = new IntegerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 4;
				Match(INTEGER);
				}
				break;
			case 3:
				{
				_localctx = new ScientificNumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5;
				Match(SCIENTIFIC_NUMBER);
				}
				break;
			case 4:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6;
				Match(STRING);
				}
				break;
			case 5:
				{
				_localctx = new CellContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7;
				Match(CELL);
				}
				break;
			case 6:
				{
				_localctx = new CellRangeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8;
				Match(CELL);
				State = 9;
				Match(T__0);
				State = 10;
				Match(CELL);
				}
				break;
			case 7:
				{
				_localctx = new NegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 11;
				Match(T__1);
				State = 12;
				expr(0);
				State = 13;
				Match(T__2);
				}
				break;
			case 8:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 15;
				Match(T__3);
				State = 16;
				expr(0);
				State = 17;
				Match(T__2);
				}
				break;
			case 9:
				{
				_localctx = new IfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19;
				Match(IF);
				State = 20;
				expr(0);
				State = 21;
				Match(T__4);
				State = 22;
				expr(0);
				State = 23;
				Match(T__4);
				State = 24;
				expr(0);
				State = 25;
				Match(T__2);
				}
				break;
			case 10:
				{
				_localctx = new PowerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 27;
				Match(POWER);
				State = 28;
				expr(0);
				State = 29;
				Match(T__4);
				State = 30;
				expr(0);
				State = 31;
				Match(T__2);
				}
				break;
			case 11:
				{
				_localctx = new AbsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 33;
				Match(ABS);
				State = 34;
				expr(0);
				State = 35;
				Match(T__2);
				}
				break;
			case 12:
				{
				_localctx = new MaxContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37;
				Match(MAX);
				State = 38;
				expr(0);
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 39;
					Match(T__4);
					State = 40;
					expr(0);
					}
					}
					State = 45;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 46;
				Match(T__2);
				}
				break;
			case 13:
				{
				_localctx = new MinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 48;
				Match(MIN);
				State = 49;
				expr(0);
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 50;
					Match(T__4);
					State = 51;
					expr(0);
					}
					}
					State = 56;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 57;
				Match(T__2);
				}
				break;
			case 14:
				{
				_localctx = new SumSqContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 59;
				Match(SUMSQ);
				State = 60;
				expr(0);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 61;
					Match(T__4);
					State = 62;
					expr(0);
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 68;
				Match(T__2);
				}
				break;
			case 15:
				{
				_localctx = new SumContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 70;
				Match(SUM);
				State = 71;
				expr(0);
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 72;
					Match(T__4);
					State = 73;
					expr(0);
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 79;
				Match(T__2);
				}
				break;
			case 16:
				{
				_localctx = new RoundContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 81;
				Match(ROUND);
				State = 82;
				expr(0);
				State = 83;
				Match(T__4);
				State = 84;
				Match(INTEGER);
				State = 85;
				Match(T__2);
				}
				break;
			case 17:
				{
				_localctx = new AverageContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87;
				Match(AVERAGE);
				State = 88;
				expr(0);
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 89;
					Match(T__4);
					State = 90;
					expr(0);
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 96;
				Match(T__2);
				}
				break;
			case 18:
				{
				_localctx = new SqrtContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98;
				Match(SQRT);
				State = 99;
				expr(0);
				State = 100;
				Match(T__2);
				}
				break;
			case 19:
				{
				_localctx = new ModContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102;
				Match(MOD);
				State = 103;
				expr(0);
				State = 104;
				Match(T__4);
				State = 105;
				Match(INTEGER);
				State = 106;
				Match(T__2);
				}
				break;
			case 20:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108;
				Match(INT);
				State = 109;
				expr(0);
				State = 110;
				Match(T__2);
				}
				break;
			case 21:
				{
				_localctx = new RandContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 112;
				Match(RAND);
				State = 113;
				Match(T__2);
				}
				break;
			case 22:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 114;
				Match(BOOLEAN);
				}
				break;
			case 23:
				{
				_localctx = new OrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 115;
				Match(OR);
				State = 116;
				expr(0);
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 117;
					Match(T__4);
					State = 118;
					expr(0);
					}
					}
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 124;
				Match(T__2);
				}
				break;
			case 24:
				{
				_localctx = new AndContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 126;
				Match(AND);
				State = 127;
				expr(0);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 128;
					Match(T__4);
					State = 129;
					expr(0);
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 135;
				Match(T__2);
				}
				break;
			case 25:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137;
				Match(NOT);
				State = 138;
				expr(0);
				State = 139;
				Match(T__2);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CalcContext(new ExprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 143;
					if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPERATOR) {
						{
						State = 144;
						((CalcContext)_localctx).op = Match(OPERATOR);
						}
					}

					State = 147;
					expr(27);
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 26);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', '\x9C', '\x4', '\x2', '\t', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', ',', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '/', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x37', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', ':', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\x42', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x45', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', 'M', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', 'P', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '^', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x61', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', 'z', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '}', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x85', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x88', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x90', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x94', 
		'\n', '\x2', '\x3', '\x2', '\a', '\x2', '\x97', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\x9A', '\v', '\x2', '\x3', '\x2', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xBB', '\x2', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x5', '\b', '\x2', '\x1', '\x2', '\x5', '\x90', 
		'\a', '\x19', '\x2', '\x2', '\x6', '\x90', '\a', '\x18', '\x2', '\x2', 
		'\a', '\x90', '\a', '\x1A', '\x2', '\x2', '\b', '\x90', '\a', '\x1C', 
		'\x2', '\x2', '\t', '\x90', '\a', '\x1D', '\x2', '\x2', '\n', '\v', '\a', 
		'\x1D', '\x2', '\x2', '\v', '\f', '\a', '\x3', '\x2', '\x2', '\f', '\x90', 
		'\a', '\x1D', '\x2', '\x2', '\r', '\xE', '\a', '\x4', '\x2', '\x2', '\xE', 
		'\xF', '\x5', '\x2', '\x2', '\x2', '\xF', '\x10', '\a', '\x5', '\x2', 
		'\x2', '\x10', '\x90', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\a', 
		'\x6', '\x2', '\x2', '\x12', '\x13', '\x5', '\x2', '\x2', '\x2', '\x13', 
		'\x14', '\a', '\x5', '\x2', '\x2', '\x14', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x16', '\a', '\xE', '\x2', '\x2', '\x16', '\x17', '\x5', 
		'\x2', '\x2', '\x2', '\x17', '\x18', '\a', '\a', '\x2', '\x2', '\x18', 
		'\x19', '\x5', '\x2', '\x2', '\x2', '\x19', '\x1A', '\a', '\a', '\x2', 
		'\x2', '\x1A', '\x1B', '\x5', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', 
		'\x5', '\x2', '\x2', '\x1C', '\x90', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1E', '\a', '\x13', '\x2', '\x2', '\x1E', '\x1F', '\x5', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\a', '\a', '\x2', '\x2', ' ', '!', '\x5', '\x2', 
		'\x2', '\x2', '!', '\"', '\a', '\x5', '\x2', '\x2', '\"', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\a', '\b', '\x2', '\x2', '$', '%', '\x5', 
		'\x2', '\x2', '\x2', '%', '&', '\a', '\x5', '\x2', '\x2', '&', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\t', '\x2', '\x2', '(', 
		'-', '\x5', '\x2', '\x2', '\x2', ')', '*', '\a', '\a', '\x2', '\x2', '*', 
		',', '\x5', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', 
		',', '/', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x5', 
		'\x2', '\x2', '\x31', '\x90', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\n', '\x2', '\x2', '\x33', '\x38', '\x5', '\x2', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\a', '\x2', '\x2', '\x35', '\x37', '\x5', '\x2', 
		'\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x37', ':', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', 
		'\x5', '\x2', '\x2', '<', '\x90', '\x3', '\x2', '\x2', '\x2', '=', '>', 
		'\a', '\v', '\x2', '\x2', '>', '\x43', '\x5', '\x2', '\x2', '\x2', '?', 
		'@', '\a', '\a', '\x2', '\x2', '@', '\x42', '\x5', '\x2', '\x2', '\x2', 
		'\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '\x5', 
		'\x2', '\x2', 'G', '\x90', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', 
		'\f', '\x2', '\x2', 'I', 'N', '\x5', '\x2', '\x2', '\x2', 'J', 'K', '\a', 
		'\a', '\x2', '\x2', 'K', 'M', '\x5', '\x2', '\x2', '\x2', 'L', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', 
		'\x5', '\x2', '\x2', 'R', '\x90', '\x3', '\x2', '\x2', '\x2', 'S', 'T', 
		'\a', '\r', '\x2', '\x2', 'T', 'U', '\x5', '\x2', '\x2', '\x2', 'U', 'V', 
		'\a', '\a', '\x2', '\x2', 'V', 'W', '\a', '\x18', '\x2', '\x2', 'W', 'X', 
		'\a', '\x5', '\x2', '\x2', 'X', '\x90', '\x3', '\x2', '\x2', '\x2', 'Y', 
		'Z', '\a', '\x12', '\x2', '\x2', 'Z', '_', '\x5', '\x2', '\x2', '\x2', 
		'[', '\\', '\a', '\a', '\x2', '\x2', '\\', '^', '\x5', '\x2', '\x2', '\x2', 
		']', '[', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x63', '\a', '\x5', '\x2', '\x2', '\x63', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\x14', '\x2', '\x2', 
		'\x65', '\x66', '\x5', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\x5', 
		'\x2', '\x2', 'g', '\x90', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', 
		'\x16', '\x2', '\x2', 'i', 'j', '\x5', '\x2', '\x2', '\x2', 'j', 'k', 
		'\a', '\a', '\x2', '\x2', 'k', 'l', '\a', '\x18', '\x2', '\x2', 'l', 'm', 
		'\a', '\x5', '\x2', '\x2', 'm', '\x90', '\x3', '\x2', '\x2', '\x2', 'n', 
		'o', '\a', '\x17', '\x2', '\x2', 'o', 'p', '\x5', '\x2', '\x2', '\x2', 
		'p', 'q', '\a', '\x5', '\x2', '\x2', 'q', '\x90', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\a', '\x15', '\x2', '\x2', 's', '\x90', '\a', '\x5', 
		'\x2', '\x2', 't', '\x90', '\a', '\x1B', '\x2', '\x2', 'u', 'v', '\a', 
		'\xF', '\x2', '\x2', 'v', '{', '\x5', '\x2', '\x2', '\x2', 'w', 'x', '\a', 
		'\a', '\x2', '\x2', 'x', 'z', '\x5', '\x2', '\x2', '\x2', 'y', 'w', '\x3', 
		'\x2', '\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '~', '\x3', 
		'\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\a', '\x5', '\x2', '\x2', '\x7F', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x81', '\a', '\x10', '\x2', '\x2', '\x81', '\x86', '\x5', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\a', '\a', '\x2', '\x2', '\x83', '\x85', 
		'\x5', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x88', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x8A', '\a', '\x5', '\x2', '\x2', '\x8A', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8C', '\a', '\x11', '\x2', '\x2', '\x8C', '\x8D', 
		'\x5', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x5', '\x2', '\x2', 
		'\x8E', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x4', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x6', '\x3', '\x2', '\x2', '\x2', '\x8F', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\b', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\t', '\x3', '\x2', '\x2', '\x2', '\x8F', '\n', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\r', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x8F', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\'', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '=', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x8F', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', 'Y', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', 'h', '\x3', '\x2', '\x2', '\x2', '\x8F', 'n', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', 'r', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		't', '\x3', '\x2', '\x2', '\x2', '\x8F', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x98', '\x3', '\x2', '\x2', '\x2', '\x91', '\x93', 
		'\f', '\x1C', '\x2', '\x2', '\x92', '\x94', '\a', '\x1E', '\x2', '\x2', 
		'\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x97', 
		'\x5', '\x2', '\x2', '\x1D', '\x96', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\f', '-', '\x38', '\x43', 'N', '_', '{', '\x86', '\x8F', '\x93', '\x98',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace XFormula.Antlr4Gen
