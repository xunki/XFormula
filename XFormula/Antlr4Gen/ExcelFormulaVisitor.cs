//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Code/MyCode/XFormula/XFormula/Grammar\ExcelFormula.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace XFormula.Antlr4Gen {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ExcelFormulaParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public interface IExcelFormulaVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOr([NotNull] ExcelFormulaParser.OrContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Max</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMax([NotNull] ExcelFormulaParser.MaxContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CellRange</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCellRange([NotNull] ExcelFormulaParser.CellRangeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParens([NotNull] ExcelFormulaParser.ParensContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitString([NotNull] ExcelFormulaParser.StringContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Int</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInt([NotNull] ExcelFormulaParser.IntContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Abs</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAbs([NotNull] ExcelFormulaParser.AbsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Negative</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNegative([NotNull] ExcelFormulaParser.NegativeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Round</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRound([NotNull] ExcelFormulaParser.RoundContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Boolean</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBoolean([NotNull] ExcelFormulaParser.BooleanContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Cell</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCell([NotNull] ExcelFormulaParser.CellContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>SumSq</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSumSq([NotNull] ExcelFormulaParser.SumSqContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Mod</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMod([NotNull] ExcelFormulaParser.ModContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Rand</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRand([NotNull] ExcelFormulaParser.RandContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Sqrt</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSqrt([NotNull] ExcelFormulaParser.SqrtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Average</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAverage([NotNull] ExcelFormulaParser.AverageContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Sum</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSum([NotNull] ExcelFormulaParser.SumContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Calc</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCalc([NotNull] ExcelFormulaParser.CalcContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Integer</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInteger([NotNull] ExcelFormulaParser.IntegerContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloat([NotNull] ExcelFormulaParser.FloatContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNot([NotNull] ExcelFormulaParser.NotContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Min</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMin([NotNull] ExcelFormulaParser.MinContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnd([NotNull] ExcelFormulaParser.AndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ScientificNumber</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScientificNumber([NotNull] ExcelFormulaParser.ScientificNumberContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>If</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIf([NotNull] ExcelFormulaParser.IfContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Power</c>
	/// labeled alternative in <see cref="ExcelFormulaParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPower([NotNull] ExcelFormulaParser.PowerContext context);
}
} // namespace XFormula.Antlr4Gen
